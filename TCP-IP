Chapter01
TCP/IP 프로토콜 개요
데이터 전송 원리
- 송신 측 호스트 의 응용프로그램이 보내는 데이터를 수신 측 호스트의 응용프로그램에 전송하려면 각 프로토콜에서 정의한 제어 정보가 필요
- 제어정보는 위치에 따라 앞쪽에 붙는 헤더와 뒤쪽에 붙는 트레일러로 나뉜다. 데이터는 이러한 제어 정보가 결합된 형태로 전송되며, 이를 패킷이라 부른다. 즉, 패킷은 [제어정보+데이터] 로 정의할 수 있다.
- 송신 측 응용프로그램에서 보낸 데이터는 TCP/IP/이더넷 계층을 지나면서 헤더 또는 트레일러 형태의 제어정보가 덧 붙어서 패킷이 생성된다. 이 패킷이 수신 측에 도달하면 이더넷/IP/TCP(송신 측의 반대방향)계층을 지나면서 헤더 또는 트레일러 형태의 제어정보가 제거되고 최종적으로 수신측 응용 프로그램이 데이터를 받는다.
- 응용 프로그래머는 주고받을 데이터만 집중하여 구현하고, 나머지는 운영체제가 제공하는 프로토콜이 처리하도록 맡기면 된다.
IP주소, 포트번호
- TCP/IP 프로토콜을 사용해 통신할 때는 IP주소와 포트번호를 사용한다. IP주소는 IPv4, IPv6 두종류가 있으며, 각각 32비트와 128비트 값을 사용한다.
예) IPv4 주소 – 147.46.114.70
   IPv6 주소 – 2001:0230:abcd:ffab:0023:eb00:ffff:1111
- 폐쇄된 네트워크 거나 IP를 공유하는 경우가 아니면 IP주소는 전 세계적으로 값이 유일하다.
- IP 주소는 인터넷에 있는 호스트를 유일하게 구분할 수 있지만 통신의 최종주체인 프로세스는 식별하지 못한다. 프로세스 식별자로는 포트번호를 사용하는데, 흔히 포트번호는 각 프로세스를 구별하는 식별자로 알려져 있다. 그러나 한 프로세스가 포트번호를 두개 이상 사용하는 경우가 있다. 따라서 포트번호는 프로세스를 구별하는 식별자라기보다는 통신의 종착점을 나타내는 식별자로 보는 것이 바람직하다.
- TCP와 UDP는 포트번호로 부호 없는 16비트정수를 사용하므로 0~65535 범위가 가능하지만 모든 범위를 자유롭게 쓸 수 있는 것은 아니다. 일반적으로 서버를 작성할 때는 1024~49151범위에서 하나 또는 일부를 선택해 사용하는 것이 바람직하다.
클라이언트-서버 모델
- 네트워크 프로그램은 일반적으로 클라이언트-서버 모델로 작성한다. 서비스를 요청하는 쪽을 클라이언트, 클라이언트다 요청하는 서비스를 처리하는 쪽을 서버라 부른다.
- 클라이언트-서버 모델을 한 컴퓨터에서 실행되는 두 프로그램에 적용할 경우에는 다양한 프로세스 간 통신 기법을 사용해 데이터를 주고받을 수 있다. 반면 네트워크로 연결된 컴퓨터에서 실행되는 두 프로그램에 적용할 경우에는 반드시 통신 프로토콜을 사용해야만 데이터를 주고받을 수 있다.
- 클라이언트가 서버에 접속하려면 서버의 IP주소와 포트번호를 알고 있어야 하지만, 서버는 클라이언트의 주소를 미리 알 필요가 없다. 클라이언트가 보낸 패킷에는 클라이언트의 주소 정보가 모두 들어있기 때문이다. 서버는 이 정보를 이용하여 언제든지 클라이언트에 데이터를 보낼 수 있다.
소켓의 개념
데이터 타입
- 소켓은 파일 디스크립터, 혹은 핸들과 유사한 개념으로, 일단 만들고 나면 함수를 호출하여 손쉽게 네트워크 통신을 수행할 수 있다.
- 응용 프로그램이 통신하려면 다음과 같은 요소가 결정되어야 한다. (사용할 프로토콜, 송신측 IP주소, 송신측 포트번호, 수신측 IP주소, 수신측 포트번호)
통신 종단점
- 소켓은 응용프로그램 관점에서 통신 종단점, 즉 통신의 출발점과 도착점이라고 간주할 수 있다.
네트워크 프로그래밍 인터페이스
- TCP/IP 프로토콜의 관점에서 소켓은 네트워크 프로그래밍 인터페이스에 불과하다. 응용프로그램이 통신하기 위해 둘다 같은 프로토콜을 사용하고 정해진 형태와 절차에 따라 데이터를 주고받으면 된다.
- TCP/IP 프로토콜 구조에서 소켓은 응용 계층과 전송 계층 사이에 위치한다고 간주한다. 그러나 전송계층을 건너뛰고 곧바로 인터넷 계층을 사용할 수 있다.


윈도우 소켓(윈속으로 부를 예정)
윈도우 소켓 특징
- 윈도우 소켓은 DLL을 통해 대부분의 기능이 제공되므로 DLL초기화와 종료작업을 위한 함수가 필요
- 윈도우 프로그램은 대개 GUI를 갖추고 메시지 구동 방식으로 동작하므로 이를 위한 확장 함수가 존재
- 윈도우는 운영체제 차원에서 멀티스레드를 지원하므로 멀티스레드 환경에서 안정적으로 동작하는 구조와 이를 위한 함수가 필요.
- 현재 윈속에서 지원하는 통신 프로토콜 
(TCP/IP, IPv6,IrDA,Bluetooth)
장점
- 유닉스 소켓과 소스코드 수준에서 호환성이 높으므로 기존코드를 이식하여 활용하기 쉽다.
- 가장 널리 사용하는 네트워크 프로그래밍 인터페이스므로 한번 배우면 여러 운영체제에서 사용 가능
- TCP/IP 외의 프로토콜도 지원하므로 최소 코드 수정으로 응용프로그램이 사용할 프로토콜을 변경할 수 있다.
- 비교적 저수준 프로그래밍 인터페이스이므로, 세부 제어가 가능하며 고성능 네트워크 프로그램을 개발할 수 있다.
단점
- 응용 프로그램 수준의 프로토콜을 프로그래머가 직접 설계해야 한다. 설계 변경시에는 코드 수정이 불가피하다.
- 서로 다른 바이트 정렬방식을 사용하거나 데이터 처리 단위(32비트, 64비트)가 서로 다른 호스트 끼리 통신할 경우, 응용프로그램 수준에서 데이터 변환 처리해야 한다.
윈도우 소켓구조
윈속이 지원하는 대부분의 기능은 WS2_32.DLL로 제공되며, 윈속1.x 응용프로그램은 WINSOCK.DLL이나 WSOCK.DLL을 통해 궁극적으로 WS2_32.DLL의 기능을 사용하게 된다. 응용 프로그램이 실제로 사용할 하부 프로토콜은 WS2_32.DLL이 적절히 선택해 연결해 준다.

Chapter02

